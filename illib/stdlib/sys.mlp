(***********************************************************************)
(*                                                                     *)
(*                           Objective Caml                            *)
(*                                                                     *)
(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)
(*                                                                     *)
(*  Copyright 1996 Institut National de Recherche en Informatique et   *)
(*  en Automatique.  All rights reserved.  This file is distributed    *)
(*  under the terms of the GNU Library General Public License, with    *)
(*  the special exception on linking described in file ../LICENSE.     *)
(*                                                                     *)
(*  adapted by Raphael Montelatici                                     *)
(*                                                                     *)
(***********************************************************************)

(* $Id: sys.ml,v 1.18 2006/07/23 03:04:14 montela Exp $ *)

(* ******************************************* *)

(* MANQUENT : *)
(*  command *)
(* time, chdir, getcwd, readdir *)
(* signal, set_signal, catch_break *)

(* ******************************************* *)



(* System interface *)

external get_argv : unit -> string array = 
 "object[]" "CamIL.Sys" "get_argv" "void"

(* external get_config: unit -> string * int = "sys_get_config" *)

let argv = get_argv()
let executable_name = argv.(0)

(* let (os_type, word_size) = get_config() *)
let os_type = "%%OSTYPE%%" (* "Cygwin" Enlevé pour Filename*)
let word_size = 32 (* doit etre genere a la compile !!! *)

let max_array_length = (1 lsl (word_size - 10)) - 1;;
let max_string_length = word_size / 8 * max_array_length - 1;;


external file_exists: string -> bool =
 "int" "CamIL.Sys" "sys_file_exists" "string"

external remove: string -> unit = 
 "void" "CamIL.Sys" "sys_remove" "string"

external rename: string -> string -> unit = 
 "void" "CamIL.Sys" "sys_rename" "string" "string"


external il_getenv: string -> string = 
"string" "CamIL.Sys" "get_environment_variable" "string"

let getenv var =
  try
    let s = il_getenv var in
      if s = "" then raise Not_found else s
  with CLIinteraction.ManagedException(x(* "System.Security.SecurityException" *),_) -> raise Not_found

external command: string -> int = 
 "int" "CamIL.Sys" "sys_system_command" "string"

external time: unit -> float =
 "float" "CamIL.Sys" "sys_time" "void"

external chdir: string -> unit = 
 "void" "CamIL.Sys" "sys_chdir" "string"

external getcwd: unit -> string = 
 "string" "CamIL.Sys" "sys_getcwd" "void"

external readdir: string -> string array =
 "object[]" "CamIL.Sys" "sys_read_directory" "string"

let interactive = ref false

type signal_behavior =
    Signal_default
  | Signal_ignore
  | Signal_handle of (int -> unit)

(*
external signal: int -> signal_behavior -> signal_behavior
        = "install_signal_handler"

let set_signal sig_num sig_beh = ignore(signal sig_num sig_beh)
*)

let sigabrt = -1
let sigalrm = -2
let sigfpe = -3
let sighup = -4
let sigill = -5
let sigint = -6
let sigkill = -7
let sigpipe = -8
let sigquit = -9
let sigsegv = -10
let sigterm = -11
let sigusr1 = -12
let sigusr2 = -13
let sigchld = -14
let sigcont = -15
let sigstop = -16
let sigtstp = -17
let sigttin = -18
let sigttou = -19
let sigvtalrm = -20
let sigprof = -21

exception Break

(*
let catch_break on =
  if on then
    set_signal sigint (Signal_handle(fun _ -> raise Break))
  else
    set_signal sigint Signal_default
*)

(* OCaml version string, must be in the format described in sys.mli. *)

let ocaml_version = "3.06+camil";;
